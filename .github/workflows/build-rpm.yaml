name: Build and Deploy RPM

on:
  push:
    tags:
      - '*'
    branches:
      - main
      - '**'


env:
  APP_NAME: sevone-ingest-data
  RPM_NAME: ibm-sevone-ingest-data
  RPM_SUFFIX: el8.x86_64.rpm
  CONTAINER_IMAGE_TAG: ${RAW_TAG}
  CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history including tags
          fetch-tags: true  # (optional, implied by fetch-depth: 0)

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Set RAW_TAG from latest Git tag
        id: get_tag
        run: |
          RAW_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0-dev")
          echo "RAW_TAG=$RAW_TAG" >> $GITHUB_ENV

      - name: Build Container Image for RHEL 8.9
        run: |
          podman build --network=host \
            -t ${{ env.CONTAINER_REGISTRY }}/${{ env.APP_NAME }}:${GITHUB_REF_NAME} \
            --build-arg APP_NAME=${{ env.APP_NAME }} \
            -f deploy/Containerfile .


      - name: Save Container Image
        run: |
          mkdir -p build/package/rpm/SOURCES
          podman save ${{ env.CONTAINER_REGISTRY }}/${{ env.APP_NAME }}:${GITHUB_REF_NAME} \
            -o build/package/rpm/SOURCES/${{ env.APP_NAME }}.${GITHUB_REF_NAME}.tar

      - name: Upload Container Artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-image
          path: build/package/rpm/SOURCES/

  build-rpm:
    name: Build RPM
    runs-on: ubuntu-latest
    needs: build-container
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history including tags
          fetch-tags: true  # (optional, implied by fetch-depth: 0)

      - name: Before download - List rpm dir
        run: |
          TOPDIR=$(pwd)/rpmbuild
          
          echo "Using RPM build directory: $TOPDIR"
          ls
          ls -R build/package/rpm || echo "Directory missing"

      - name: Download Container Artifact
        uses: actions/download-artifact@v4
        with:
          name: container-image
          path: build/package/rpm/SOURCES  # Specify where to download

      - name: Set RAW_TAG from latest Git tag
        id: get_tag
        run: |
          RAW_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0-dev")
          echo "RAW_TAG=$RAW_TAG" >> $GITHUB_ENV

     # - name: Prepare RPM Sources
     #   run: |
     #     ls -lrt
     #     cp -r src/ build/package/rpm/SOURCES/
      - name: Export GitHub Environment Variables
        run: |
          export GITHUB_REF_NAME=${{ github.ref_name }}
          export CONTAINER_REGISTRY=${{ env.CONTAINER_REGISTRY }}
          export VERSION=$RAW_TAG

      - name: Build RPM
        run: |
          TOPDIR=$(pwd)/rpmbuild
          echo "Using RPM build directory: $TOPDIR"

          mkdir -p $TOPDIR/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          mkdir -p $TOPDIR/SOURCES/app/{bin,etc,env}

          cp -r bin/* $TOPDIR/SOURCES/app/bin
          cp -r etc/* $TOPDIR/SOURCES/app/etc
          cp -r env/* $TOPDIR/SOURCES/app/env

          # Copy files into correct structure
          #ls -R build/package/rpm
          
          cp build/package/rpm/SOURCES/el-wifi-automations.${GITHUB_REF_NAME}.tar $TOPDIR/SOURCES/app/el-wifi-automations.${GITHUB_REF_NAME}.tar

          cp build/package/rpm/SPECS/app.spec $TOPDIR/SPECS/

          # Optional: list contents for debugging
          #echo "Spec file:"
          #cat $TOPDIR/SPECS/app.spec
          echo "Reached RPM Build"
          # Build RPM
          rpmbuild --define "_topdir $TOPDIR" -bb $TOPDIR/SPECS/app.spec

      - name: Upload RPM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ github.ref_name }}
          path: rpmbuild/RPMS/**/*.rpm

